import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv
import openai

load_dotenv()
TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úçÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "üìà –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞")
    await message.answer("–Ø –ì—É—Ä—É-–§–∏–Ω—á—ë—Ç–∫–æ. –í—ã–±–∏—Ä–∞–π, —Å —á–µ–º –ø–æ–º–æ—á—å:", reply_markup=kb)

@dp.message_handler(lambda message: message.text in ["‚úçÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "üìà –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞"])
async def handle_options(message: types.Message):
    if message.text == "‚úçÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        await message.answer("–ó–∞–¥–∞–≤–∞–π —Å–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
    elif message.text == "üìà –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞":
        await message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ –æ—Ç—á–µ—Ç–∞. –Ø –ø–æ—Å–º–æ—Ç—Ä—é.")

@dp.message_handler(content_types=types.ContentType.TEXT)
async def analyze_text(message: types.Message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –ì—É—Ä—É-–§–∏–Ω—á—ë—Ç–∫–æ ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å—Ç—Ä–æ–≥–æ, —Å –ª—ë–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π. –ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç."},
                {"role": "user", "content": message.text}
            ]
        )
        await message.answer(response["choices"][0]["message"]["content"])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    await message.document.download()
    await message.answer("üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ü–æ–∫–∞ —è –Ω–µ —á–∏—Ç–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –Ω–æ —Å–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PDF, Excel –∏ –¥—Ä.")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    await message.answer("üñº –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –í –±—É–¥—É—â–µ–º —Å–º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Å–∫—Ä–∏–Ω—ã –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∏–∑ –Ω–∏—Ö —Ü–∏—Ñ—Ä—ã.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)